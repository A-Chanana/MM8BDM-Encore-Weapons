
// Knockback actors should inherit from this
actor EncoreKnockbackHelper
{
Mass 1 //Thrust
Accuracy 0 //ZThrust
Meleerange 0 //Flags //Radial = 1, Halt = 2
States
{
Spawn:
TNT1 A 0
TNT1 A 1 A_RearrangePointers(0,0,2)
TNT1 A 0 A_TransferPointer(2,0,2,2)
TNT1 A 0 A_SetArg(0,CallACS("core_gettracer"))
TNT1 A 0 A_JumpIf(Accuracy<1,2)
TNT1 A 0 ThrustThingZ(args[0],Accuracy,0,0)
TNT1 A 0 ACS_NamedExecuteAlways("enc_knockback",0,args[0],Mass,Meleerange)
TNT1 A 1 A_Jump(256,"SpawnFX")
SpawnFX:
TNT1 A 1
stop
}
}

const int BT_ATTACK	= 1;
const int BT_JUMP = 4;
const int BT_ALTATTACK = 32;
// A_JumpIfInventory doesn't desync on high pings, unlike CallACS
actor Enc_ButtonCheckSync_P : CustomInventory
{
states
{
Pickup:
TNT1 A 0 A_Jumpif(CallACS("Enc_ButtonCheck",BT_ATTACK,0,240),"Firing")
TNT1 A 0 A_TakeInventory("BTFireFlag")
AltfireCheck:
TNT1 A 0 A_Jumpif(CallACS("Enc_ButtonCheck",BT_ALTATTACK,0,240),"Altfiring")
TNT1 A 0 A_TakeInventory("BTAltfireFlag")
stop
Firing:
TNT1 A 0 A_GiveInventory("BTFireFlag")
goto AltfireCheck
Altfiring:
TNT1 A 0 A_GiveInventory("BTAltfireFlag")
stop
}
}
actor BTFireFlag : Once {}
actor BTAltfireFlag : Once {}
actor BTJumpFlag : Once {}


actor MMB2Weapons : MMWeaponGiver
{
+INVENTORY.AUTOACTIVATE
States
{
SpawnWeapons:
TNT1 A 0
Spawn:
TNT1 A 0
TNT1 A 0 A_SpawnItemEx("BulletVulcanWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 0)
TNT1 A 0 A_SpawnItemEx("BrassBulletWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 1)
TNT1 A 0 A_SpawnItemEx("FlameShowerWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 2)
TNT1 A 0 A_SpawnItemEx("FlameMixerWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 3)
TNT1 A 0 A_SpawnItemEx("DoppelCrashWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 4)
TNT1 A 0 A_SpawnItemEx("DopplerAttackWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 5)
TNT1 A 0 A_SpawnItemEx("TimeSwitchWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 6)
TNT1 A 0 A_SpawnItemEx("TimeBombWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 7)
TNT1 A 0 A_SpawnItemEx("BarrierWindWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 8)
TNT1 A 0 A_SpawnItemEx("WindCycloneWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 9)
TNT1 A 0 A_SpawnItemEx("TrailsparkNeedleWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 10)
TNT1 A 0 A_SpawnItemEx("CardinalRingWep", 16 * 2, 0, 0, 0, 0, 0, 30 * 11)
stop
Use:
TNT1 A 0 A_PlaySoundEx("item/refill","Voice")
TNT1 A 0 A_GiveInventory("BulletVulcanWep", 1)
TNT1 A 0 A_GiveInventory("BrassBulletWep", 1)
TNT1 A 0 A_GiveInventory("TimeBombWep", 1)
TNT1 A 0 A_GiveInventory("TimeSwitchWep", 1)
TNT1 A 0 A_GiveInventory("FlameShowerWep", 1)
TNT1 A 0 A_GiveInventory("FlameMixerWep", 1)
TNT1 A 0 A_GiveInventory("DoppelCrashWep", 1)
TNT1 A 0 A_GiveInventory("DopplerAttackWep", 1)
TNT1 A 0 A_GiveInventory("BarrierWindWep", 1)
TNT1 A 0 A_GiveInventory("WindCycloneWep", 1)
TNT1 A 0 A_GiveInventory("TrailsparkNeedleWep", 1)
TNT1 A 0 A_GiveInventory("CardinalRingWep", 1)
stop
}
}

actor EncMiscWeapons : MMWeaponGiver
{
+INVENTORY.AUTOACTIVATE
States
{
SpawnWeapons:
TNT1 A 0 A_SpawnItemEx("BondingPasteWep")
TNT1 A 0 A_SpawnItemEx("PurityMeteorWep",32)
TNT1 A 0 A_SpawnItemEx("BerserkerRushWep",32,0,0,0,0,0,45)
TNT1 A 0 A_SpawnItemEx("ShieldSpiralWep",32,0,0,0,0,0,90)
TNT1 A 0 A_SpawnItemEx("RestrictionRingWep",32,0,0,0,0,0,135)
TNT1 A 0 A_SpawnItemEx("OnslaughtGatlingWep",32,0,0,0,0,0,180)
TNT1 A 0 A_SpawnItemEx("RoyalSpinWep",32,0,0,0,0,0,225)
TNT1 A 0 A_SpawnItemEx("KingRodWep",32,0,0,0,0,0,270)
TNT1 A 0 A_SpawnItemEx("TidalBulwarkWep",32,0,0,0,0,0,315)
TNT1 A 0 A_SpawnItemEx("HyperTorrentWep",64)
TNT1 A 0 A_SpawnItemEx("NovaBeamWep",64,0,0,0,0,0,90)
//TNT1 A 0 A_SpawnItemEx("",32,0,0,0,0,0,180)
stop
Use:
TNT1 A 0 A_PlaySoundEx("item/refill","Voice")
TNT1 A 0 A_GiveInventory("BondingPasteWep",1)
TNT1 A 0 A_GiveInventory("PurityMeteorWep",1)
TNT1 A 0 A_GiveInventory("BerserkerRushWep",1)
TNT1 A 0 A_GiveInventory("ShieldSpiralWep",1)
TNT1 A 0 A_GiveInventory("RestrictionRingWep",1)
TNT1 A 0 A_GiveInventory("OnslaughtGatlingWep",1)
TNT1 A 0 A_GiveInventory("RoyalSpinWep",1)
TNT1 A 0 A_GiveInventory("KingRodWep",1)
TNT1 A 0 A_GiveInventory("TidalBulwarkWep",1)
TNT1 A 0 A_GiveInventory("HyperTorrentWep",1)
TNT1 A 0 A_GiveInventory("NovaBeamWep",1)
stop
}
}

// Given by "enc_class_altfire" script
// Used to allow clientside prediction of class altfires
actor ENC_ClassAltfire : Inventory
{
    inventory.amount 1
    inventory.maxamount 1
}

actor IsSpecialBot : Once {}